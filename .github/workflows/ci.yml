name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Setup test certificate from secrets
        env:
          TEST_CERTIFICATE_BASE64: ${{ secrets.TEST_CERTIFICATE_BASE64 }}
          TEST_CERTIFICATE_PASSWORD: ${{ secrets.TEST_CERTIFICATE_PASSWORD }}
        run: |
          if [ -n "$TEST_CERTIFICATE_BASE64" ]; then
            echo "Setting up test certificate from GitHub secrets..."
            echo "$TEST_CERTIFICATE_BASE64" | base64 -d > test-certificate.p12
            echo "TEST_CERTIFICATE_PASSWORD=$TEST_CERTIFICATE_PASSWORD" >> $GITHUB_ENV
            echo "Test certificate configured, integration tests will run"
          else
            echo "No certificate in secrets, skipping setup"
          fi

      - name: Check test certificate availability
        run: |
          if [ -f "test-certificate.p12" ]; then
            echo "✅ Test certificate available - integration tests will run"
            echo "CERT_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "⚠️ No test certificate - skipping integration tests"
            echo "CERT_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Run unit tests
        run: npm run test:ts:unit

      # Integration tests only run if certificate is available
      - name: Run integration tests (conditional)
        if: env.CERT_AVAILABLE == 'true'
        run: |
          echo "Running integration tests with certificate..."
          npm run test:ts:integration

      - name: Skip integration tests message
        if: env.CERT_AVAILABLE == 'false'
        run: echo "ℹ️ Integration tests skipped - no test certificate available"
      - name: Verify package contents
        run: npm pack --dry-run

      - name: Check TypeScript compilation
        run: npx tsc --noEmit

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 7

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, build]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Check if version changed
        id: version-check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view furs-client-ts version 2>/dev/null || echo "0.0.0")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "published=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version-check.outputs.changed == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.version-check.outputs.changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-check.outputs.current }}
          release_name: Release v${{ steps.version-check.outputs.current }}
          body: |
            ## Changes in v${{ steps.version-check.outputs.current }}

            See [CHANGELOG.md](https://github.com/nejcar20/furs-client-ts/blob/master/CHANGELOG.md) for details.

            ## Installation
            ```bash
            npm install furs-client-ts@${{ steps.version-check.outputs.current }}
            ```
          draft: false
          prerelease: false

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build, publish]
    if: always()

    steps:
      - name: Notify success
        if: needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "- Tests passed on Node.js 16.x, 18.x, 20.x"
          echo "- Build completed successfully"
          if [[ "${{ needs.publish.result }}" == "success" ]]; then
            echo "- Package published to NPM"
            echo "- GitHub release created"
          fi

      - name: Notify failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "- Test result: ${{ needs.test.result }}"
          echo "- Build result: ${{ needs.build.result }}"
          echo "- Publish result: ${{ needs.publish.result }}"
          exit 1
